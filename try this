public void scan() throws Exception {
        // schritt 1 fur Rufung die Scan Methode
        LocalDevice localDevice = LocalDevice.getLocalDevice();

        //schritt 2 fur Rufung die Scan Methode
        DiscoveryAgent agent = localDevice.getDiscoveryAgent();
        
        //schritt 3 fur Rufung die Scan Methode
        agent.startInquiry(DiscoveryAgent.GIAC, new DiscoveryListener() {
            @Override
            public void deviceDiscovered(RemoteDevice btDevice, DeviceClass cod) {
                try {//hier begint die Suche
                    String name = btDevice.getFriendlyName(false);
                    RemoteDevice dev = btDevice;
                    Device d = new Device(name, dev);
                    devices.add(d);
                    System.out.println(name + " added");

                } catch (IOException ex) {
                    Logger.getLogger(HC05.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

            @Override
            public void servicesDiscovered(int i, ServiceRecord[] srs) {
                scanFinished = true;
            }

            @Override
            public void serviceSearchCompleted(int i, int i1) {

            }

            @Override
            public void inquiryCompleted(int i) {
                System.out.println("search is complet");
            }

        });
    }

    public void conect(String s) throws Exception {
        System.out.println(s);
        if ("HC-05".equals(s)||"HC-06".equals(s) ) {
            System.out.println("connecting");
            for (int i = 0; i < devices.size(); i++) {
                if ("HC-05".equals(devices.elementAt(i).name)||"HC-06".equals(devices.elementAt(i).name)) {
                    hc05device = devices.elementAt(i).hc05device;
                }

            }
            UUID uuid = new UUID(0x1101); //scan for btspp://... services (as HC-05 offers it)
            UUID[] searchUuidSet = new UUID[]{uuid};
            int[] attrIDs = new int[]{
                0x0100 // service name
            };
            scanFinished = false;
            LocalDevice.getLocalDevice().getDiscoveryAgent().searchServices(attrIDs, searchUuidSet,
                    hc05device, new DiscoveryListener() {
                        @Override
                        public void deviceDiscovered(RemoteDevice btDevice, DeviceClass cod) {
                        }

                        @Override
                        public void inquiryCompleted(int discType) {
                        }

                        @Override
                        public void serviceSearchCompleted(int transID, int respCode) {
                            scanFinished = true;
                        }

                        @Override
                        public void servicesDiscovered(int transID, ServiceRecord[] servRecord) {
                            for (int i = 0; i < servRecord.length; i++) {
                                hc05Url = servRecord[i].getConnectionURL(ServiceRecord.NOAUTHENTICATE_NOENCRYPT, false);
                                if (hc05Url != null) {
                                    break; //take the first one
                                }
                            }
                        }
                    });

            while (!scanFinished) {
                Thread.sleep(500);
            }
            
            System.out.println("got it");
        } else {
            System.out.println("cannot conect");

        }

    }
